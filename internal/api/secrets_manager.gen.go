// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.13.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// Acl defines model for acl.
type Acl struct {
	// Cidr The given IP/IP Range that is permitted to access.
	Cidr string `json:"cidr"`

	// Id A auto generated unique id which identifies the acl.
	Id string `json:"id"`
}

// AclCreate defines model for aclCreate.
type AclCreate struct {
	// Cidr The given IP/IP Range that is permitted to access.
	Cidr string `json:"cidr"`
}

// AclList defines model for aclList.
type AclList struct {
	Acls []Acl `json:"acls"`
}

// AclUpdate defines model for aclUpdate.
type AclUpdate struct {
	// Cidr The given IP/IP Range that is permitted to access.
	Cidr string `json:"cidr"`
}

// AclUpdateList defines model for aclUpdateList.
type AclUpdateList struct {
	Cidrs *[]AclUpdate `json:"cidrs,omitempty"`
}

// Instance defines model for instance.
type Instance struct {
	// ApiUrl The API endpoint for connecting to the secrets engine.
	ApiUrl string `json:"apiUrl"`

	// CreationFinishedDate The date and time the creation of the Secrets Manager instance was finished.
	CreationFinishedDate *string `json:"creationFinishedDate,omitempty"`

	// CreationStartDate The date and time the creation of the Secrets Manager instance was triggered.
	CreationStartDate string `json:"creationStartDate"`

	// Id A auto generated unique id which identifies the secrets manager instances.
	Id string `json:"id"`

	// Name A user chosen name to distinguish multiple secrets manager instances.
	Name string `json:"name"`

	// SecretCount The number of secrets currently stored inside of the instance. This value will be updated once per hour.
	SecretCount int `json:"secretCount"`

	// SecretsEngine The name of the secrets engine.
	SecretsEngine string `json:"secretsEngine"`

	// State The current state of the Secrets Manager instance.
	State              string  `json:"state"`
	UpdateFinishedDate *string `json:"updateFinishedDate,omitempty"`
	UpdateStartDate    *string `json:"updateStartDate,omitempty"`
}

// InstanceCreate defines model for instanceCreate.
type InstanceCreate struct {
	// Name A user chosen name to distinguish multiple secrets manager instances.
	Name string `json:"name"`
}

// InstanceList defines model for instanceList.
type InstanceList struct {
	Instances []Instance `json:"instances"`
}

// User defines model for user.
type User struct {
	// Description A user chosen description to differentiate between multiple users.
	Description string `json:"description"`

	// Id A auto generated unique id which identifies the users.
	Id string `json:"id"`

	// Password A auto generated password for logging in with the user.
	Password string `json:"password"`

	// Username A auto generated username for logging in with the user.
	Username string `json:"username"`

	// Write Is true if the user has write access to the secrets engine. Is false for a read-only user.
	Write bool `json:"write"`
}

// UserCreate defines model for userCreate.
type UserCreate struct {
	// Description A user chosen description to differentiate between multiple users.
	Description string `json:"description"`

	// Write Is true if the user has write access to the secrets engine. Is false for a read-only user.
	Write bool `json:"write"`
}

// UserList defines model for userList.
type UserList struct {
	Users []User `json:"users"`
}

// UserUpdate defines model for userUpdate.
type UserUpdate struct {
	// Write Is true if the user has write access to the secrets engine. Is false for a read-only user.
	Write *bool `json:"write,omitempty"`
}

// PostV1ProjectsProjectIdInstancesJSONRequestBody defines body for PostV1ProjectsProjectIdInstances for application/json ContentType.
type PostV1ProjectsProjectIdInstancesJSONRequestBody = InstanceCreate

// PostV1ProjectsProjectIdInstancesInstanceIdAclsJSONRequestBody defines body for PostV1ProjectsProjectIdInstancesInstanceIdAcls for application/json ContentType.
type PostV1ProjectsProjectIdInstancesInstanceIdAclsJSONRequestBody = AclCreate

// PutV1ProjectsProjectIdInstancesInstanceIdAclsJSONRequestBody defines body for PutV1ProjectsProjectIdInstancesInstanceIdAcls for application/json ContentType.
type PutV1ProjectsProjectIdInstancesInstanceIdAclsJSONRequestBody = AclUpdateList

// PutV1ProjectsProjectIdInstancesInstanceIdAclsAclIdJSONRequestBody defines body for PutV1ProjectsProjectIdInstancesInstanceIdAclsAclId for application/json ContentType.
type PutV1ProjectsProjectIdInstancesInstanceIdAclsAclIdJSONRequestBody = AclUpdate

// PostV1ProjectsProjectIdInstancesInstanceIdUsersJSONRequestBody defines body for PostV1ProjectsProjectIdInstancesInstanceIdUsers for application/json ContentType.
type PostV1ProjectsProjectIdInstancesInstanceIdUsersJSONRequestBody = UserCreate

// PutV1ProjectsProjectIdInstancesInstanceIdUsersUserIdJSONRequestBody defines body for PutV1ProjectsProjectIdInstancesInstanceIdUsersUserId for application/json ContentType.
type PutV1ProjectsProjectIdInstancesInstanceIdUsersUserIdJSONRequestBody = UserUpdate

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetV1ProjectsProjectIdInstances request
	GetV1ProjectsProjectIdInstances(ctx context.Context, projectId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV1ProjectsProjectIdInstances request with any body
	PostV1ProjectsProjectIdInstancesWithBody(ctx context.Context, projectId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV1ProjectsProjectIdInstances(ctx context.Context, projectId string, body PostV1ProjectsProjectIdInstancesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteV1ProjectsProjectIdInstancesInstanceId request
	DeleteV1ProjectsProjectIdInstancesInstanceId(ctx context.Context, projectId string, instanceId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1ProjectsProjectIdInstancesInstanceId request
	GetV1ProjectsProjectIdInstancesInstanceId(ctx context.Context, projectId string, instanceId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1ProjectsProjectIdInstancesInstanceIdAcls request
	GetV1ProjectsProjectIdInstancesInstanceIdAcls(ctx context.Context, projectId string, instanceId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV1ProjectsProjectIdInstancesInstanceIdAcls request with any body
	PostV1ProjectsProjectIdInstancesInstanceIdAclsWithBody(ctx context.Context, projectId string, instanceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV1ProjectsProjectIdInstancesInstanceIdAcls(ctx context.Context, projectId string, instanceId string, body PostV1ProjectsProjectIdInstancesInstanceIdAclsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutV1ProjectsProjectIdInstancesInstanceIdAcls request with any body
	PutV1ProjectsProjectIdInstancesInstanceIdAclsWithBody(ctx context.Context, projectId string, instanceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutV1ProjectsProjectIdInstancesInstanceIdAcls(ctx context.Context, projectId string, instanceId string, body PutV1ProjectsProjectIdInstancesInstanceIdAclsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteV1ProjectsProjectIdInstancesInstanceIdAclsAclId request
	DeleteV1ProjectsProjectIdInstancesInstanceIdAclsAclId(ctx context.Context, projectId string, instanceId string, aclId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1ProjectsProjectIdInstancesInstanceIdAclsAclId request
	GetV1ProjectsProjectIdInstancesInstanceIdAclsAclId(ctx context.Context, projectId string, instanceId string, aclId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutV1ProjectsProjectIdInstancesInstanceIdAclsAclId request with any body
	PutV1ProjectsProjectIdInstancesInstanceIdAclsAclIdWithBody(ctx context.Context, projectId string, instanceId string, aclId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutV1ProjectsProjectIdInstancesInstanceIdAclsAclId(ctx context.Context, projectId string, instanceId string, aclId string, body PutV1ProjectsProjectIdInstancesInstanceIdAclsAclIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1ProjectsProjectIdInstancesInstanceIdUsers request
	GetV1ProjectsProjectIdInstancesInstanceIdUsers(ctx context.Context, projectId string, instanceId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV1ProjectsProjectIdInstancesInstanceIdUsers request with any body
	PostV1ProjectsProjectIdInstancesInstanceIdUsersWithBody(ctx context.Context, projectId string, instanceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV1ProjectsProjectIdInstancesInstanceIdUsers(ctx context.Context, projectId string, instanceId string, body PostV1ProjectsProjectIdInstancesInstanceIdUsersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteV1ProjectsProjectIdInstancesInstanceIdUsersUserId request
	DeleteV1ProjectsProjectIdInstancesInstanceIdUsersUserId(ctx context.Context, projectId string, instanceId string, userId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1ProjectsProjectIdInstancesInstanceIdUsersUserId request
	GetV1ProjectsProjectIdInstancesInstanceIdUsersUserId(ctx context.Context, projectId string, instanceId string, userId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutV1ProjectsProjectIdInstancesInstanceIdUsersUserId request with any body
	PutV1ProjectsProjectIdInstancesInstanceIdUsersUserIdWithBody(ctx context.Context, projectId string, instanceId string, userId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutV1ProjectsProjectIdInstancesInstanceIdUsersUserId(ctx context.Context, projectId string, instanceId string, userId string, body PutV1ProjectsProjectIdInstancesInstanceIdUsersUserIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetV1ProjectsProjectIdInstances(ctx context.Context, projectId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1ProjectsProjectIdInstancesRequest(c.Server, projectId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1ProjectsProjectIdInstancesWithBody(ctx context.Context, projectId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1ProjectsProjectIdInstancesRequestWithBody(c.Server, projectId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1ProjectsProjectIdInstances(ctx context.Context, projectId string, body PostV1ProjectsProjectIdInstancesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1ProjectsProjectIdInstancesRequest(c.Server, projectId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteV1ProjectsProjectIdInstancesInstanceId(ctx context.Context, projectId string, instanceId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteV1ProjectsProjectIdInstancesInstanceIdRequest(c.Server, projectId, instanceId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1ProjectsProjectIdInstancesInstanceId(ctx context.Context, projectId string, instanceId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1ProjectsProjectIdInstancesInstanceIdRequest(c.Server, projectId, instanceId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1ProjectsProjectIdInstancesInstanceIdAcls(ctx context.Context, projectId string, instanceId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1ProjectsProjectIdInstancesInstanceIdAclsRequest(c.Server, projectId, instanceId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1ProjectsProjectIdInstancesInstanceIdAclsWithBody(ctx context.Context, projectId string, instanceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1ProjectsProjectIdInstancesInstanceIdAclsRequestWithBody(c.Server, projectId, instanceId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1ProjectsProjectIdInstancesInstanceIdAcls(ctx context.Context, projectId string, instanceId string, body PostV1ProjectsProjectIdInstancesInstanceIdAclsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1ProjectsProjectIdInstancesInstanceIdAclsRequest(c.Server, projectId, instanceId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutV1ProjectsProjectIdInstancesInstanceIdAclsWithBody(ctx context.Context, projectId string, instanceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutV1ProjectsProjectIdInstancesInstanceIdAclsRequestWithBody(c.Server, projectId, instanceId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutV1ProjectsProjectIdInstancesInstanceIdAcls(ctx context.Context, projectId string, instanceId string, body PutV1ProjectsProjectIdInstancesInstanceIdAclsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutV1ProjectsProjectIdInstancesInstanceIdAclsRequest(c.Server, projectId, instanceId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteV1ProjectsProjectIdInstancesInstanceIdAclsAclId(ctx context.Context, projectId string, instanceId string, aclId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteV1ProjectsProjectIdInstancesInstanceIdAclsAclIdRequest(c.Server, projectId, instanceId, aclId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1ProjectsProjectIdInstancesInstanceIdAclsAclId(ctx context.Context, projectId string, instanceId string, aclId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1ProjectsProjectIdInstancesInstanceIdAclsAclIdRequest(c.Server, projectId, instanceId, aclId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutV1ProjectsProjectIdInstancesInstanceIdAclsAclIdWithBody(ctx context.Context, projectId string, instanceId string, aclId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutV1ProjectsProjectIdInstancesInstanceIdAclsAclIdRequestWithBody(c.Server, projectId, instanceId, aclId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutV1ProjectsProjectIdInstancesInstanceIdAclsAclId(ctx context.Context, projectId string, instanceId string, aclId string, body PutV1ProjectsProjectIdInstancesInstanceIdAclsAclIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutV1ProjectsProjectIdInstancesInstanceIdAclsAclIdRequest(c.Server, projectId, instanceId, aclId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1ProjectsProjectIdInstancesInstanceIdUsers(ctx context.Context, projectId string, instanceId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1ProjectsProjectIdInstancesInstanceIdUsersRequest(c.Server, projectId, instanceId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1ProjectsProjectIdInstancesInstanceIdUsersWithBody(ctx context.Context, projectId string, instanceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1ProjectsProjectIdInstancesInstanceIdUsersRequestWithBody(c.Server, projectId, instanceId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1ProjectsProjectIdInstancesInstanceIdUsers(ctx context.Context, projectId string, instanceId string, body PostV1ProjectsProjectIdInstancesInstanceIdUsersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1ProjectsProjectIdInstancesInstanceIdUsersRequest(c.Server, projectId, instanceId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteV1ProjectsProjectIdInstancesInstanceIdUsersUserId(ctx context.Context, projectId string, instanceId string, userId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteV1ProjectsProjectIdInstancesInstanceIdUsersUserIdRequest(c.Server, projectId, instanceId, userId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1ProjectsProjectIdInstancesInstanceIdUsersUserId(ctx context.Context, projectId string, instanceId string, userId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1ProjectsProjectIdInstancesInstanceIdUsersUserIdRequest(c.Server, projectId, instanceId, userId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutV1ProjectsProjectIdInstancesInstanceIdUsersUserIdWithBody(ctx context.Context, projectId string, instanceId string, userId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutV1ProjectsProjectIdInstancesInstanceIdUsersUserIdRequestWithBody(c.Server, projectId, instanceId, userId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutV1ProjectsProjectIdInstancesInstanceIdUsersUserId(ctx context.Context, projectId string, instanceId string, userId string, body PutV1ProjectsProjectIdInstancesInstanceIdUsersUserIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutV1ProjectsProjectIdInstancesInstanceIdUsersUserIdRequest(c.Server, projectId, instanceId, userId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetV1ProjectsProjectIdInstancesRequest generates requests for GetV1ProjectsProjectIdInstances
func NewGetV1ProjectsProjectIdInstancesRequest(server string, projectId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectId", runtime.ParamLocationPath, projectId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/instances", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostV1ProjectsProjectIdInstancesRequest calls the generic PostV1ProjectsProjectIdInstances builder with application/json body
func NewPostV1ProjectsProjectIdInstancesRequest(server string, projectId string, body PostV1ProjectsProjectIdInstancesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV1ProjectsProjectIdInstancesRequestWithBody(server, projectId, "application/json", bodyReader)
}

// NewPostV1ProjectsProjectIdInstancesRequestWithBody generates requests for PostV1ProjectsProjectIdInstances with any type of body
func NewPostV1ProjectsProjectIdInstancesRequestWithBody(server string, projectId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectId", runtime.ParamLocationPath, projectId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/instances", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteV1ProjectsProjectIdInstancesInstanceIdRequest generates requests for DeleteV1ProjectsProjectIdInstancesInstanceId
func NewDeleteV1ProjectsProjectIdInstancesInstanceIdRequest(server string, projectId string, instanceId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectId", runtime.ParamLocationPath, projectId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "instanceId", runtime.ParamLocationPath, instanceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/instances/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1ProjectsProjectIdInstancesInstanceIdRequest generates requests for GetV1ProjectsProjectIdInstancesInstanceId
func NewGetV1ProjectsProjectIdInstancesInstanceIdRequest(server string, projectId string, instanceId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectId", runtime.ParamLocationPath, projectId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "instanceId", runtime.ParamLocationPath, instanceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/instances/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1ProjectsProjectIdInstancesInstanceIdAclsRequest generates requests for GetV1ProjectsProjectIdInstancesInstanceIdAcls
func NewGetV1ProjectsProjectIdInstancesInstanceIdAclsRequest(server string, projectId string, instanceId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectId", runtime.ParamLocationPath, projectId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "instanceId", runtime.ParamLocationPath, instanceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/instances/%s/acls", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostV1ProjectsProjectIdInstancesInstanceIdAclsRequest calls the generic PostV1ProjectsProjectIdInstancesInstanceIdAcls builder with application/json body
func NewPostV1ProjectsProjectIdInstancesInstanceIdAclsRequest(server string, projectId string, instanceId string, body PostV1ProjectsProjectIdInstancesInstanceIdAclsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV1ProjectsProjectIdInstancesInstanceIdAclsRequestWithBody(server, projectId, instanceId, "application/json", bodyReader)
}

// NewPostV1ProjectsProjectIdInstancesInstanceIdAclsRequestWithBody generates requests for PostV1ProjectsProjectIdInstancesInstanceIdAcls with any type of body
func NewPostV1ProjectsProjectIdInstancesInstanceIdAclsRequestWithBody(server string, projectId string, instanceId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectId", runtime.ParamLocationPath, projectId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "instanceId", runtime.ParamLocationPath, instanceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/instances/%s/acls", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutV1ProjectsProjectIdInstancesInstanceIdAclsRequest calls the generic PutV1ProjectsProjectIdInstancesInstanceIdAcls builder with application/json body
func NewPutV1ProjectsProjectIdInstancesInstanceIdAclsRequest(server string, projectId string, instanceId string, body PutV1ProjectsProjectIdInstancesInstanceIdAclsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutV1ProjectsProjectIdInstancesInstanceIdAclsRequestWithBody(server, projectId, instanceId, "application/json", bodyReader)
}

// NewPutV1ProjectsProjectIdInstancesInstanceIdAclsRequestWithBody generates requests for PutV1ProjectsProjectIdInstancesInstanceIdAcls with any type of body
func NewPutV1ProjectsProjectIdInstancesInstanceIdAclsRequestWithBody(server string, projectId string, instanceId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectId", runtime.ParamLocationPath, projectId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "instanceId", runtime.ParamLocationPath, instanceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/instances/%s/acls", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteV1ProjectsProjectIdInstancesInstanceIdAclsAclIdRequest generates requests for DeleteV1ProjectsProjectIdInstancesInstanceIdAclsAclId
func NewDeleteV1ProjectsProjectIdInstancesInstanceIdAclsAclIdRequest(server string, projectId string, instanceId string, aclId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectId", runtime.ParamLocationPath, projectId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "instanceId", runtime.ParamLocationPath, instanceId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "aclId", runtime.ParamLocationPath, aclId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/instances/%s/acls/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1ProjectsProjectIdInstancesInstanceIdAclsAclIdRequest generates requests for GetV1ProjectsProjectIdInstancesInstanceIdAclsAclId
func NewGetV1ProjectsProjectIdInstancesInstanceIdAclsAclIdRequest(server string, projectId string, instanceId string, aclId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectId", runtime.ParamLocationPath, projectId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "instanceId", runtime.ParamLocationPath, instanceId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "aclId", runtime.ParamLocationPath, aclId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/instances/%s/acls/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutV1ProjectsProjectIdInstancesInstanceIdAclsAclIdRequest calls the generic PutV1ProjectsProjectIdInstancesInstanceIdAclsAclId builder with application/json body
func NewPutV1ProjectsProjectIdInstancesInstanceIdAclsAclIdRequest(server string, projectId string, instanceId string, aclId string, body PutV1ProjectsProjectIdInstancesInstanceIdAclsAclIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutV1ProjectsProjectIdInstancesInstanceIdAclsAclIdRequestWithBody(server, projectId, instanceId, aclId, "application/json", bodyReader)
}

// NewPutV1ProjectsProjectIdInstancesInstanceIdAclsAclIdRequestWithBody generates requests for PutV1ProjectsProjectIdInstancesInstanceIdAclsAclId with any type of body
func NewPutV1ProjectsProjectIdInstancesInstanceIdAclsAclIdRequestWithBody(server string, projectId string, instanceId string, aclId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectId", runtime.ParamLocationPath, projectId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "instanceId", runtime.ParamLocationPath, instanceId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "aclId", runtime.ParamLocationPath, aclId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/instances/%s/acls/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetV1ProjectsProjectIdInstancesInstanceIdUsersRequest generates requests for GetV1ProjectsProjectIdInstancesInstanceIdUsers
func NewGetV1ProjectsProjectIdInstancesInstanceIdUsersRequest(server string, projectId string, instanceId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectId", runtime.ParamLocationPath, projectId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "instanceId", runtime.ParamLocationPath, instanceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/instances/%s/users", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostV1ProjectsProjectIdInstancesInstanceIdUsersRequest calls the generic PostV1ProjectsProjectIdInstancesInstanceIdUsers builder with application/json body
func NewPostV1ProjectsProjectIdInstancesInstanceIdUsersRequest(server string, projectId string, instanceId string, body PostV1ProjectsProjectIdInstancesInstanceIdUsersJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV1ProjectsProjectIdInstancesInstanceIdUsersRequestWithBody(server, projectId, instanceId, "application/json", bodyReader)
}

// NewPostV1ProjectsProjectIdInstancesInstanceIdUsersRequestWithBody generates requests for PostV1ProjectsProjectIdInstancesInstanceIdUsers with any type of body
func NewPostV1ProjectsProjectIdInstancesInstanceIdUsersRequestWithBody(server string, projectId string, instanceId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectId", runtime.ParamLocationPath, projectId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "instanceId", runtime.ParamLocationPath, instanceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/instances/%s/users", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteV1ProjectsProjectIdInstancesInstanceIdUsersUserIdRequest generates requests for DeleteV1ProjectsProjectIdInstancesInstanceIdUsersUserId
func NewDeleteV1ProjectsProjectIdInstancesInstanceIdUsersUserIdRequest(server string, projectId string, instanceId string, userId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectId", runtime.ParamLocationPath, projectId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "instanceId", runtime.ParamLocationPath, instanceId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/instances/%s/users/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1ProjectsProjectIdInstancesInstanceIdUsersUserIdRequest generates requests for GetV1ProjectsProjectIdInstancesInstanceIdUsersUserId
func NewGetV1ProjectsProjectIdInstancesInstanceIdUsersUserIdRequest(server string, projectId string, instanceId string, userId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectId", runtime.ParamLocationPath, projectId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "instanceId", runtime.ParamLocationPath, instanceId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/instances/%s/users/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutV1ProjectsProjectIdInstancesInstanceIdUsersUserIdRequest calls the generic PutV1ProjectsProjectIdInstancesInstanceIdUsersUserId builder with application/json body
func NewPutV1ProjectsProjectIdInstancesInstanceIdUsersUserIdRequest(server string, projectId string, instanceId string, userId string, body PutV1ProjectsProjectIdInstancesInstanceIdUsersUserIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutV1ProjectsProjectIdInstancesInstanceIdUsersUserIdRequestWithBody(server, projectId, instanceId, userId, "application/json", bodyReader)
}

// NewPutV1ProjectsProjectIdInstancesInstanceIdUsersUserIdRequestWithBody generates requests for PutV1ProjectsProjectIdInstancesInstanceIdUsersUserId with any type of body
func NewPutV1ProjectsProjectIdInstancesInstanceIdUsersUserIdRequestWithBody(server string, projectId string, instanceId string, userId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectId", runtime.ParamLocationPath, projectId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "instanceId", runtime.ParamLocationPath, instanceId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/instances/%s/users/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetV1ProjectsProjectIdInstances request
	GetV1ProjectsProjectIdInstancesWithResponse(ctx context.Context, projectId string, reqEditors ...RequestEditorFn) (*GetV1ProjectsProjectIdInstancesResponse, error)

	// PostV1ProjectsProjectIdInstances request with any body
	PostV1ProjectsProjectIdInstancesWithBodyWithResponse(ctx context.Context, projectId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1ProjectsProjectIdInstancesResponse, error)

	PostV1ProjectsProjectIdInstancesWithResponse(ctx context.Context, projectId string, body PostV1ProjectsProjectIdInstancesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1ProjectsProjectIdInstancesResponse, error)

	// DeleteV1ProjectsProjectIdInstancesInstanceId request
	DeleteV1ProjectsProjectIdInstancesInstanceIdWithResponse(ctx context.Context, projectId string, instanceId string, reqEditors ...RequestEditorFn) (*DeleteV1ProjectsProjectIdInstancesInstanceIdResponse, error)

	// GetV1ProjectsProjectIdInstancesInstanceId request
	GetV1ProjectsProjectIdInstancesInstanceIdWithResponse(ctx context.Context, projectId string, instanceId string, reqEditors ...RequestEditorFn) (*GetV1ProjectsProjectIdInstancesInstanceIdResponse, error)

	// GetV1ProjectsProjectIdInstancesInstanceIdAcls request
	GetV1ProjectsProjectIdInstancesInstanceIdAclsWithResponse(ctx context.Context, projectId string, instanceId string, reqEditors ...RequestEditorFn) (*GetV1ProjectsProjectIdInstancesInstanceIdAclsResponse, error)

	// PostV1ProjectsProjectIdInstancesInstanceIdAcls request with any body
	PostV1ProjectsProjectIdInstancesInstanceIdAclsWithBodyWithResponse(ctx context.Context, projectId string, instanceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1ProjectsProjectIdInstancesInstanceIdAclsResponse, error)

	PostV1ProjectsProjectIdInstancesInstanceIdAclsWithResponse(ctx context.Context, projectId string, instanceId string, body PostV1ProjectsProjectIdInstancesInstanceIdAclsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1ProjectsProjectIdInstancesInstanceIdAclsResponse, error)

	// PutV1ProjectsProjectIdInstancesInstanceIdAcls request with any body
	PutV1ProjectsProjectIdInstancesInstanceIdAclsWithBodyWithResponse(ctx context.Context, projectId string, instanceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutV1ProjectsProjectIdInstancesInstanceIdAclsResponse, error)

	PutV1ProjectsProjectIdInstancesInstanceIdAclsWithResponse(ctx context.Context, projectId string, instanceId string, body PutV1ProjectsProjectIdInstancesInstanceIdAclsJSONRequestBody, reqEditors ...RequestEditorFn) (*PutV1ProjectsProjectIdInstancesInstanceIdAclsResponse, error)

	// DeleteV1ProjectsProjectIdInstancesInstanceIdAclsAclId request
	DeleteV1ProjectsProjectIdInstancesInstanceIdAclsAclIdWithResponse(ctx context.Context, projectId string, instanceId string, aclId string, reqEditors ...RequestEditorFn) (*DeleteV1ProjectsProjectIdInstancesInstanceIdAclsAclIdResponse, error)

	// GetV1ProjectsProjectIdInstancesInstanceIdAclsAclId request
	GetV1ProjectsProjectIdInstancesInstanceIdAclsAclIdWithResponse(ctx context.Context, projectId string, instanceId string, aclId string, reqEditors ...RequestEditorFn) (*GetV1ProjectsProjectIdInstancesInstanceIdAclsAclIdResponse, error)

	// PutV1ProjectsProjectIdInstancesInstanceIdAclsAclId request with any body
	PutV1ProjectsProjectIdInstancesInstanceIdAclsAclIdWithBodyWithResponse(ctx context.Context, projectId string, instanceId string, aclId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutV1ProjectsProjectIdInstancesInstanceIdAclsAclIdResponse, error)

	PutV1ProjectsProjectIdInstancesInstanceIdAclsAclIdWithResponse(ctx context.Context, projectId string, instanceId string, aclId string, body PutV1ProjectsProjectIdInstancesInstanceIdAclsAclIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutV1ProjectsProjectIdInstancesInstanceIdAclsAclIdResponse, error)

	// GetV1ProjectsProjectIdInstancesInstanceIdUsers request
	GetV1ProjectsProjectIdInstancesInstanceIdUsersWithResponse(ctx context.Context, projectId string, instanceId string, reqEditors ...RequestEditorFn) (*GetV1ProjectsProjectIdInstancesInstanceIdUsersResponse, error)

	// PostV1ProjectsProjectIdInstancesInstanceIdUsers request with any body
	PostV1ProjectsProjectIdInstancesInstanceIdUsersWithBodyWithResponse(ctx context.Context, projectId string, instanceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1ProjectsProjectIdInstancesInstanceIdUsersResponse, error)

	PostV1ProjectsProjectIdInstancesInstanceIdUsersWithResponse(ctx context.Context, projectId string, instanceId string, body PostV1ProjectsProjectIdInstancesInstanceIdUsersJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1ProjectsProjectIdInstancesInstanceIdUsersResponse, error)

	// DeleteV1ProjectsProjectIdInstancesInstanceIdUsersUserId request
	DeleteV1ProjectsProjectIdInstancesInstanceIdUsersUserIdWithResponse(ctx context.Context, projectId string, instanceId string, userId string, reqEditors ...RequestEditorFn) (*DeleteV1ProjectsProjectIdInstancesInstanceIdUsersUserIdResponse, error)

	// GetV1ProjectsProjectIdInstancesInstanceIdUsersUserId request
	GetV1ProjectsProjectIdInstancesInstanceIdUsersUserIdWithResponse(ctx context.Context, projectId string, instanceId string, userId string, reqEditors ...RequestEditorFn) (*GetV1ProjectsProjectIdInstancesInstanceIdUsersUserIdResponse, error)

	// PutV1ProjectsProjectIdInstancesInstanceIdUsersUserId request with any body
	PutV1ProjectsProjectIdInstancesInstanceIdUsersUserIdWithBodyWithResponse(ctx context.Context, projectId string, instanceId string, userId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutV1ProjectsProjectIdInstancesInstanceIdUsersUserIdResponse, error)

	PutV1ProjectsProjectIdInstancesInstanceIdUsersUserIdWithResponse(ctx context.Context, projectId string, instanceId string, userId string, body PutV1ProjectsProjectIdInstancesInstanceIdUsersUserIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutV1ProjectsProjectIdInstancesInstanceIdUsersUserIdResponse, error)
}

type GetV1ProjectsProjectIdInstancesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *InstanceList
}

// Status returns HTTPResponse.Status
func (r GetV1ProjectsProjectIdInstancesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1ProjectsProjectIdInstancesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV1ProjectsProjectIdInstancesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Instance
}

// Status returns HTTPResponse.Status
func (r PostV1ProjectsProjectIdInstancesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV1ProjectsProjectIdInstancesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteV1ProjectsProjectIdInstancesInstanceIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteV1ProjectsProjectIdInstancesInstanceIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteV1ProjectsProjectIdInstancesInstanceIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1ProjectsProjectIdInstancesInstanceIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Instance
}

// Status returns HTTPResponse.Status
func (r GetV1ProjectsProjectIdInstancesInstanceIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1ProjectsProjectIdInstancesInstanceIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1ProjectsProjectIdInstancesInstanceIdAclsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AclList
}

// Status returns HTTPResponse.Status
func (r GetV1ProjectsProjectIdInstancesInstanceIdAclsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1ProjectsProjectIdInstancesInstanceIdAclsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV1ProjectsProjectIdInstancesInstanceIdAclsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Acl
}

// Status returns HTTPResponse.Status
func (r PostV1ProjectsProjectIdInstancesInstanceIdAclsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV1ProjectsProjectIdInstancesInstanceIdAclsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutV1ProjectsProjectIdInstancesInstanceIdAclsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutV1ProjectsProjectIdInstancesInstanceIdAclsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutV1ProjectsProjectIdInstancesInstanceIdAclsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteV1ProjectsProjectIdInstancesInstanceIdAclsAclIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteV1ProjectsProjectIdInstancesInstanceIdAclsAclIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteV1ProjectsProjectIdInstancesInstanceIdAclsAclIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1ProjectsProjectIdInstancesInstanceIdAclsAclIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Acl
}

// Status returns HTTPResponse.Status
func (r GetV1ProjectsProjectIdInstancesInstanceIdAclsAclIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1ProjectsProjectIdInstancesInstanceIdAclsAclIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutV1ProjectsProjectIdInstancesInstanceIdAclsAclIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutV1ProjectsProjectIdInstancesInstanceIdAclsAclIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutV1ProjectsProjectIdInstancesInstanceIdAclsAclIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1ProjectsProjectIdInstancesInstanceIdUsersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UserList
}

// Status returns HTTPResponse.Status
func (r GetV1ProjectsProjectIdInstancesInstanceIdUsersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1ProjectsProjectIdInstancesInstanceIdUsersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV1ProjectsProjectIdInstancesInstanceIdUsersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *User
}

// Status returns HTTPResponse.Status
func (r PostV1ProjectsProjectIdInstancesInstanceIdUsersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV1ProjectsProjectIdInstancesInstanceIdUsersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteV1ProjectsProjectIdInstancesInstanceIdUsersUserIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteV1ProjectsProjectIdInstancesInstanceIdUsersUserIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteV1ProjectsProjectIdInstancesInstanceIdUsersUserIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1ProjectsProjectIdInstancesInstanceIdUsersUserIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *User
}

// Status returns HTTPResponse.Status
func (r GetV1ProjectsProjectIdInstancesInstanceIdUsersUserIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1ProjectsProjectIdInstancesInstanceIdUsersUserIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutV1ProjectsProjectIdInstancesInstanceIdUsersUserIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutV1ProjectsProjectIdInstancesInstanceIdUsersUserIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutV1ProjectsProjectIdInstancesInstanceIdUsersUserIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetV1ProjectsProjectIdInstancesWithResponse request returning *GetV1ProjectsProjectIdInstancesResponse
func (c *ClientWithResponses) GetV1ProjectsProjectIdInstancesWithResponse(ctx context.Context, projectId string, reqEditors ...RequestEditorFn) (*GetV1ProjectsProjectIdInstancesResponse, error) {
	rsp, err := c.GetV1ProjectsProjectIdInstances(ctx, projectId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1ProjectsProjectIdInstancesResponse(rsp)
}

// PostV1ProjectsProjectIdInstancesWithBodyWithResponse request with arbitrary body returning *PostV1ProjectsProjectIdInstancesResponse
func (c *ClientWithResponses) PostV1ProjectsProjectIdInstancesWithBodyWithResponse(ctx context.Context, projectId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1ProjectsProjectIdInstancesResponse, error) {
	rsp, err := c.PostV1ProjectsProjectIdInstancesWithBody(ctx, projectId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1ProjectsProjectIdInstancesResponse(rsp)
}

func (c *ClientWithResponses) PostV1ProjectsProjectIdInstancesWithResponse(ctx context.Context, projectId string, body PostV1ProjectsProjectIdInstancesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1ProjectsProjectIdInstancesResponse, error) {
	rsp, err := c.PostV1ProjectsProjectIdInstances(ctx, projectId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1ProjectsProjectIdInstancesResponse(rsp)
}

// DeleteV1ProjectsProjectIdInstancesInstanceIdWithResponse request returning *DeleteV1ProjectsProjectIdInstancesInstanceIdResponse
func (c *ClientWithResponses) DeleteV1ProjectsProjectIdInstancesInstanceIdWithResponse(ctx context.Context, projectId string, instanceId string, reqEditors ...RequestEditorFn) (*DeleteV1ProjectsProjectIdInstancesInstanceIdResponse, error) {
	rsp, err := c.DeleteV1ProjectsProjectIdInstancesInstanceId(ctx, projectId, instanceId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteV1ProjectsProjectIdInstancesInstanceIdResponse(rsp)
}

// GetV1ProjectsProjectIdInstancesInstanceIdWithResponse request returning *GetV1ProjectsProjectIdInstancesInstanceIdResponse
func (c *ClientWithResponses) GetV1ProjectsProjectIdInstancesInstanceIdWithResponse(ctx context.Context, projectId string, instanceId string, reqEditors ...RequestEditorFn) (*GetV1ProjectsProjectIdInstancesInstanceIdResponse, error) {
	rsp, err := c.GetV1ProjectsProjectIdInstancesInstanceId(ctx, projectId, instanceId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1ProjectsProjectIdInstancesInstanceIdResponse(rsp)
}

// GetV1ProjectsProjectIdInstancesInstanceIdAclsWithResponse request returning *GetV1ProjectsProjectIdInstancesInstanceIdAclsResponse
func (c *ClientWithResponses) GetV1ProjectsProjectIdInstancesInstanceIdAclsWithResponse(ctx context.Context, projectId string, instanceId string, reqEditors ...RequestEditorFn) (*GetV1ProjectsProjectIdInstancesInstanceIdAclsResponse, error) {
	rsp, err := c.GetV1ProjectsProjectIdInstancesInstanceIdAcls(ctx, projectId, instanceId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1ProjectsProjectIdInstancesInstanceIdAclsResponse(rsp)
}

// PostV1ProjectsProjectIdInstancesInstanceIdAclsWithBodyWithResponse request with arbitrary body returning *PostV1ProjectsProjectIdInstancesInstanceIdAclsResponse
func (c *ClientWithResponses) PostV1ProjectsProjectIdInstancesInstanceIdAclsWithBodyWithResponse(ctx context.Context, projectId string, instanceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1ProjectsProjectIdInstancesInstanceIdAclsResponse, error) {
	rsp, err := c.PostV1ProjectsProjectIdInstancesInstanceIdAclsWithBody(ctx, projectId, instanceId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1ProjectsProjectIdInstancesInstanceIdAclsResponse(rsp)
}

func (c *ClientWithResponses) PostV1ProjectsProjectIdInstancesInstanceIdAclsWithResponse(ctx context.Context, projectId string, instanceId string, body PostV1ProjectsProjectIdInstancesInstanceIdAclsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1ProjectsProjectIdInstancesInstanceIdAclsResponse, error) {
	rsp, err := c.PostV1ProjectsProjectIdInstancesInstanceIdAcls(ctx, projectId, instanceId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1ProjectsProjectIdInstancesInstanceIdAclsResponse(rsp)
}

// PutV1ProjectsProjectIdInstancesInstanceIdAclsWithBodyWithResponse request with arbitrary body returning *PutV1ProjectsProjectIdInstancesInstanceIdAclsResponse
func (c *ClientWithResponses) PutV1ProjectsProjectIdInstancesInstanceIdAclsWithBodyWithResponse(ctx context.Context, projectId string, instanceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutV1ProjectsProjectIdInstancesInstanceIdAclsResponse, error) {
	rsp, err := c.PutV1ProjectsProjectIdInstancesInstanceIdAclsWithBody(ctx, projectId, instanceId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutV1ProjectsProjectIdInstancesInstanceIdAclsResponse(rsp)
}

func (c *ClientWithResponses) PutV1ProjectsProjectIdInstancesInstanceIdAclsWithResponse(ctx context.Context, projectId string, instanceId string, body PutV1ProjectsProjectIdInstancesInstanceIdAclsJSONRequestBody, reqEditors ...RequestEditorFn) (*PutV1ProjectsProjectIdInstancesInstanceIdAclsResponse, error) {
	rsp, err := c.PutV1ProjectsProjectIdInstancesInstanceIdAcls(ctx, projectId, instanceId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutV1ProjectsProjectIdInstancesInstanceIdAclsResponse(rsp)
}

// DeleteV1ProjectsProjectIdInstancesInstanceIdAclsAclIdWithResponse request returning *DeleteV1ProjectsProjectIdInstancesInstanceIdAclsAclIdResponse
func (c *ClientWithResponses) DeleteV1ProjectsProjectIdInstancesInstanceIdAclsAclIdWithResponse(ctx context.Context, projectId string, instanceId string, aclId string, reqEditors ...RequestEditorFn) (*DeleteV1ProjectsProjectIdInstancesInstanceIdAclsAclIdResponse, error) {
	rsp, err := c.DeleteV1ProjectsProjectIdInstancesInstanceIdAclsAclId(ctx, projectId, instanceId, aclId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteV1ProjectsProjectIdInstancesInstanceIdAclsAclIdResponse(rsp)
}

// GetV1ProjectsProjectIdInstancesInstanceIdAclsAclIdWithResponse request returning *GetV1ProjectsProjectIdInstancesInstanceIdAclsAclIdResponse
func (c *ClientWithResponses) GetV1ProjectsProjectIdInstancesInstanceIdAclsAclIdWithResponse(ctx context.Context, projectId string, instanceId string, aclId string, reqEditors ...RequestEditorFn) (*GetV1ProjectsProjectIdInstancesInstanceIdAclsAclIdResponse, error) {
	rsp, err := c.GetV1ProjectsProjectIdInstancesInstanceIdAclsAclId(ctx, projectId, instanceId, aclId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1ProjectsProjectIdInstancesInstanceIdAclsAclIdResponse(rsp)
}

// PutV1ProjectsProjectIdInstancesInstanceIdAclsAclIdWithBodyWithResponse request with arbitrary body returning *PutV1ProjectsProjectIdInstancesInstanceIdAclsAclIdResponse
func (c *ClientWithResponses) PutV1ProjectsProjectIdInstancesInstanceIdAclsAclIdWithBodyWithResponse(ctx context.Context, projectId string, instanceId string, aclId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutV1ProjectsProjectIdInstancesInstanceIdAclsAclIdResponse, error) {
	rsp, err := c.PutV1ProjectsProjectIdInstancesInstanceIdAclsAclIdWithBody(ctx, projectId, instanceId, aclId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutV1ProjectsProjectIdInstancesInstanceIdAclsAclIdResponse(rsp)
}

func (c *ClientWithResponses) PutV1ProjectsProjectIdInstancesInstanceIdAclsAclIdWithResponse(ctx context.Context, projectId string, instanceId string, aclId string, body PutV1ProjectsProjectIdInstancesInstanceIdAclsAclIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutV1ProjectsProjectIdInstancesInstanceIdAclsAclIdResponse, error) {
	rsp, err := c.PutV1ProjectsProjectIdInstancesInstanceIdAclsAclId(ctx, projectId, instanceId, aclId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutV1ProjectsProjectIdInstancesInstanceIdAclsAclIdResponse(rsp)
}

// GetV1ProjectsProjectIdInstancesInstanceIdUsersWithResponse request returning *GetV1ProjectsProjectIdInstancesInstanceIdUsersResponse
func (c *ClientWithResponses) GetV1ProjectsProjectIdInstancesInstanceIdUsersWithResponse(ctx context.Context, projectId string, instanceId string, reqEditors ...RequestEditorFn) (*GetV1ProjectsProjectIdInstancesInstanceIdUsersResponse, error) {
	rsp, err := c.GetV1ProjectsProjectIdInstancesInstanceIdUsers(ctx, projectId, instanceId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1ProjectsProjectIdInstancesInstanceIdUsersResponse(rsp)
}

// PostV1ProjectsProjectIdInstancesInstanceIdUsersWithBodyWithResponse request with arbitrary body returning *PostV1ProjectsProjectIdInstancesInstanceIdUsersResponse
func (c *ClientWithResponses) PostV1ProjectsProjectIdInstancesInstanceIdUsersWithBodyWithResponse(ctx context.Context, projectId string, instanceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1ProjectsProjectIdInstancesInstanceIdUsersResponse, error) {
	rsp, err := c.PostV1ProjectsProjectIdInstancesInstanceIdUsersWithBody(ctx, projectId, instanceId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1ProjectsProjectIdInstancesInstanceIdUsersResponse(rsp)
}

func (c *ClientWithResponses) PostV1ProjectsProjectIdInstancesInstanceIdUsersWithResponse(ctx context.Context, projectId string, instanceId string, body PostV1ProjectsProjectIdInstancesInstanceIdUsersJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1ProjectsProjectIdInstancesInstanceIdUsersResponse, error) {
	rsp, err := c.PostV1ProjectsProjectIdInstancesInstanceIdUsers(ctx, projectId, instanceId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1ProjectsProjectIdInstancesInstanceIdUsersResponse(rsp)
}

// DeleteV1ProjectsProjectIdInstancesInstanceIdUsersUserIdWithResponse request returning *DeleteV1ProjectsProjectIdInstancesInstanceIdUsersUserIdResponse
func (c *ClientWithResponses) DeleteV1ProjectsProjectIdInstancesInstanceIdUsersUserIdWithResponse(ctx context.Context, projectId string, instanceId string, userId string, reqEditors ...RequestEditorFn) (*DeleteV1ProjectsProjectIdInstancesInstanceIdUsersUserIdResponse, error) {
	rsp, err := c.DeleteV1ProjectsProjectIdInstancesInstanceIdUsersUserId(ctx, projectId, instanceId, userId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteV1ProjectsProjectIdInstancesInstanceIdUsersUserIdResponse(rsp)
}

// GetV1ProjectsProjectIdInstancesInstanceIdUsersUserIdWithResponse request returning *GetV1ProjectsProjectIdInstancesInstanceIdUsersUserIdResponse
func (c *ClientWithResponses) GetV1ProjectsProjectIdInstancesInstanceIdUsersUserIdWithResponse(ctx context.Context, projectId string, instanceId string, userId string, reqEditors ...RequestEditorFn) (*GetV1ProjectsProjectIdInstancesInstanceIdUsersUserIdResponse, error) {
	rsp, err := c.GetV1ProjectsProjectIdInstancesInstanceIdUsersUserId(ctx, projectId, instanceId, userId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1ProjectsProjectIdInstancesInstanceIdUsersUserIdResponse(rsp)
}

// PutV1ProjectsProjectIdInstancesInstanceIdUsersUserIdWithBodyWithResponse request with arbitrary body returning *PutV1ProjectsProjectIdInstancesInstanceIdUsersUserIdResponse
func (c *ClientWithResponses) PutV1ProjectsProjectIdInstancesInstanceIdUsersUserIdWithBodyWithResponse(ctx context.Context, projectId string, instanceId string, userId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutV1ProjectsProjectIdInstancesInstanceIdUsersUserIdResponse, error) {
	rsp, err := c.PutV1ProjectsProjectIdInstancesInstanceIdUsersUserIdWithBody(ctx, projectId, instanceId, userId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutV1ProjectsProjectIdInstancesInstanceIdUsersUserIdResponse(rsp)
}

func (c *ClientWithResponses) PutV1ProjectsProjectIdInstancesInstanceIdUsersUserIdWithResponse(ctx context.Context, projectId string, instanceId string, userId string, body PutV1ProjectsProjectIdInstancesInstanceIdUsersUserIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutV1ProjectsProjectIdInstancesInstanceIdUsersUserIdResponse, error) {
	rsp, err := c.PutV1ProjectsProjectIdInstancesInstanceIdUsersUserId(ctx, projectId, instanceId, userId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutV1ProjectsProjectIdInstancesInstanceIdUsersUserIdResponse(rsp)
}

// ParseGetV1ProjectsProjectIdInstancesResponse parses an HTTP response from a GetV1ProjectsProjectIdInstancesWithResponse call
func ParseGetV1ProjectsProjectIdInstancesResponse(rsp *http.Response) (*GetV1ProjectsProjectIdInstancesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1ProjectsProjectIdInstancesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest InstanceList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostV1ProjectsProjectIdInstancesResponse parses an HTTP response from a PostV1ProjectsProjectIdInstancesWithResponse call
func ParsePostV1ProjectsProjectIdInstancesResponse(rsp *http.Response) (*PostV1ProjectsProjectIdInstancesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV1ProjectsProjectIdInstancesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Instance
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDeleteV1ProjectsProjectIdInstancesInstanceIdResponse parses an HTTP response from a DeleteV1ProjectsProjectIdInstancesInstanceIdWithResponse call
func ParseDeleteV1ProjectsProjectIdInstancesInstanceIdResponse(rsp *http.Response) (*DeleteV1ProjectsProjectIdInstancesInstanceIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteV1ProjectsProjectIdInstancesInstanceIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetV1ProjectsProjectIdInstancesInstanceIdResponse parses an HTTP response from a GetV1ProjectsProjectIdInstancesInstanceIdWithResponse call
func ParseGetV1ProjectsProjectIdInstancesInstanceIdResponse(rsp *http.Response) (*GetV1ProjectsProjectIdInstancesInstanceIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1ProjectsProjectIdInstancesInstanceIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Instance
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetV1ProjectsProjectIdInstancesInstanceIdAclsResponse parses an HTTP response from a GetV1ProjectsProjectIdInstancesInstanceIdAclsWithResponse call
func ParseGetV1ProjectsProjectIdInstancesInstanceIdAclsResponse(rsp *http.Response) (*GetV1ProjectsProjectIdInstancesInstanceIdAclsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1ProjectsProjectIdInstancesInstanceIdAclsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AclList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostV1ProjectsProjectIdInstancesInstanceIdAclsResponse parses an HTTP response from a PostV1ProjectsProjectIdInstancesInstanceIdAclsWithResponse call
func ParsePostV1ProjectsProjectIdInstancesInstanceIdAclsResponse(rsp *http.Response) (*PostV1ProjectsProjectIdInstancesInstanceIdAclsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV1ProjectsProjectIdInstancesInstanceIdAclsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Acl
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParsePutV1ProjectsProjectIdInstancesInstanceIdAclsResponse parses an HTTP response from a PutV1ProjectsProjectIdInstancesInstanceIdAclsWithResponse call
func ParsePutV1ProjectsProjectIdInstancesInstanceIdAclsResponse(rsp *http.Response) (*PutV1ProjectsProjectIdInstancesInstanceIdAclsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutV1ProjectsProjectIdInstancesInstanceIdAclsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteV1ProjectsProjectIdInstancesInstanceIdAclsAclIdResponse parses an HTTP response from a DeleteV1ProjectsProjectIdInstancesInstanceIdAclsAclIdWithResponse call
func ParseDeleteV1ProjectsProjectIdInstancesInstanceIdAclsAclIdResponse(rsp *http.Response) (*DeleteV1ProjectsProjectIdInstancesInstanceIdAclsAclIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteV1ProjectsProjectIdInstancesInstanceIdAclsAclIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetV1ProjectsProjectIdInstancesInstanceIdAclsAclIdResponse parses an HTTP response from a GetV1ProjectsProjectIdInstancesInstanceIdAclsAclIdWithResponse call
func ParseGetV1ProjectsProjectIdInstancesInstanceIdAclsAclIdResponse(rsp *http.Response) (*GetV1ProjectsProjectIdInstancesInstanceIdAclsAclIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1ProjectsProjectIdInstancesInstanceIdAclsAclIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Acl
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutV1ProjectsProjectIdInstancesInstanceIdAclsAclIdResponse parses an HTTP response from a PutV1ProjectsProjectIdInstancesInstanceIdAclsAclIdWithResponse call
func ParsePutV1ProjectsProjectIdInstancesInstanceIdAclsAclIdResponse(rsp *http.Response) (*PutV1ProjectsProjectIdInstancesInstanceIdAclsAclIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutV1ProjectsProjectIdInstancesInstanceIdAclsAclIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetV1ProjectsProjectIdInstancesInstanceIdUsersResponse parses an HTTP response from a GetV1ProjectsProjectIdInstancesInstanceIdUsersWithResponse call
func ParseGetV1ProjectsProjectIdInstancesInstanceIdUsersResponse(rsp *http.Response) (*GetV1ProjectsProjectIdInstancesInstanceIdUsersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1ProjectsProjectIdInstancesInstanceIdUsersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostV1ProjectsProjectIdInstancesInstanceIdUsersResponse parses an HTTP response from a PostV1ProjectsProjectIdInstancesInstanceIdUsersWithResponse call
func ParsePostV1ProjectsProjectIdInstancesInstanceIdUsersResponse(rsp *http.Response) (*PostV1ProjectsProjectIdInstancesInstanceIdUsersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV1ProjectsProjectIdInstancesInstanceIdUsersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest User
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteV1ProjectsProjectIdInstancesInstanceIdUsersUserIdResponse parses an HTTP response from a DeleteV1ProjectsProjectIdInstancesInstanceIdUsersUserIdWithResponse call
func ParseDeleteV1ProjectsProjectIdInstancesInstanceIdUsersUserIdResponse(rsp *http.Response) (*DeleteV1ProjectsProjectIdInstancesInstanceIdUsersUserIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteV1ProjectsProjectIdInstancesInstanceIdUsersUserIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetV1ProjectsProjectIdInstancesInstanceIdUsersUserIdResponse parses an HTTP response from a GetV1ProjectsProjectIdInstancesInstanceIdUsersUserIdWithResponse call
func ParseGetV1ProjectsProjectIdInstancesInstanceIdUsersUserIdResponse(rsp *http.Response) (*GetV1ProjectsProjectIdInstancesInstanceIdUsersUserIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1ProjectsProjectIdInstancesInstanceIdUsersUserIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest User
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutV1ProjectsProjectIdInstancesInstanceIdUsersUserIdResponse parses an HTTP response from a PutV1ProjectsProjectIdInstancesInstanceIdUsersUserIdWithResponse call
func ParsePutV1ProjectsProjectIdInstancesInstanceIdUsersUserIdResponse(rsp *http.Response) (*PutV1ProjectsProjectIdInstancesInstanceIdUsersUserIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutV1ProjectsProjectIdInstancesInstanceIdUsersUserIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /v1/projects/{projectId}/instances)
	GetV1ProjectsProjectIdInstances(ctx echo.Context, projectId string) error

	// (POST /v1/projects/{projectId}/instances)
	PostV1ProjectsProjectIdInstances(ctx echo.Context, projectId string) error

	// (DELETE /v1/projects/{projectId}/instances/{instanceId})
	DeleteV1ProjectsProjectIdInstancesInstanceId(ctx echo.Context, projectId string, instanceId string) error

	// (GET /v1/projects/{projectId}/instances/{instanceId})
	GetV1ProjectsProjectIdInstancesInstanceId(ctx echo.Context, projectId string, instanceId string) error

	// (GET /v1/projects/{projectId}/instances/{instanceId}/acls)
	GetV1ProjectsProjectIdInstancesInstanceIdAcls(ctx echo.Context, projectId string, instanceId string) error

	// (POST /v1/projects/{projectId}/instances/{instanceId}/acls)
	PostV1ProjectsProjectIdInstancesInstanceIdAcls(ctx echo.Context, projectId string, instanceId string) error

	// (PUT /v1/projects/{projectId}/instances/{instanceId}/acls)
	PutV1ProjectsProjectIdInstancesInstanceIdAcls(ctx echo.Context, projectId string, instanceId string) error

	// (DELETE /v1/projects/{projectId}/instances/{instanceId}/acls/{aclId})
	DeleteV1ProjectsProjectIdInstancesInstanceIdAclsAclId(ctx echo.Context, projectId string, instanceId string, aclId string) error

	// (GET /v1/projects/{projectId}/instances/{instanceId}/acls/{aclId})
	GetV1ProjectsProjectIdInstancesInstanceIdAclsAclId(ctx echo.Context, projectId string, instanceId string, aclId string) error

	// (PUT /v1/projects/{projectId}/instances/{instanceId}/acls/{aclId})
	PutV1ProjectsProjectIdInstancesInstanceIdAclsAclId(ctx echo.Context, projectId string, instanceId string, aclId string) error

	// (GET /v1/projects/{projectId}/instances/{instanceId}/users)
	GetV1ProjectsProjectIdInstancesInstanceIdUsers(ctx echo.Context, projectId string, instanceId string) error

	// (POST /v1/projects/{projectId}/instances/{instanceId}/users)
	PostV1ProjectsProjectIdInstancesInstanceIdUsers(ctx echo.Context, projectId string, instanceId string) error

	// (DELETE /v1/projects/{projectId}/instances/{instanceId}/users/{userId})
	DeleteV1ProjectsProjectIdInstancesInstanceIdUsersUserId(ctx echo.Context, projectId string, instanceId string, userId string) error

	// (GET /v1/projects/{projectId}/instances/{instanceId}/users/{userId})
	GetV1ProjectsProjectIdInstancesInstanceIdUsersUserId(ctx echo.Context, projectId string, instanceId string, userId string) error

	// (PUT /v1/projects/{projectId}/instances/{instanceId}/users/{userId})
	PutV1ProjectsProjectIdInstancesInstanceIdUsersUserId(ctx echo.Context, projectId string, instanceId string, userId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetV1ProjectsProjectIdInstances converts echo context to params.
func (w *ServerInterfaceWrapper) GetV1ProjectsProjectIdInstances(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "projectId" -------------
	var projectId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "projectId", runtime.ParamLocationPath, ctx.Param("projectId"), &projectId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter projectId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetV1ProjectsProjectIdInstances(ctx, projectId)
	return err
}

// PostV1ProjectsProjectIdInstances converts echo context to params.
func (w *ServerInterfaceWrapper) PostV1ProjectsProjectIdInstances(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "projectId" -------------
	var projectId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "projectId", runtime.ParamLocationPath, ctx.Param("projectId"), &projectId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter projectId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostV1ProjectsProjectIdInstances(ctx, projectId)
	return err
}

// DeleteV1ProjectsProjectIdInstancesInstanceId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteV1ProjectsProjectIdInstancesInstanceId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "projectId" -------------
	var projectId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "projectId", runtime.ParamLocationPath, ctx.Param("projectId"), &projectId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter projectId: %s", err))
	}

	// ------------- Path parameter "instanceId" -------------
	var instanceId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "instanceId", runtime.ParamLocationPath, ctx.Param("instanceId"), &instanceId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter instanceId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteV1ProjectsProjectIdInstancesInstanceId(ctx, projectId, instanceId)
	return err
}

// GetV1ProjectsProjectIdInstancesInstanceId converts echo context to params.
func (w *ServerInterfaceWrapper) GetV1ProjectsProjectIdInstancesInstanceId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "projectId" -------------
	var projectId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "projectId", runtime.ParamLocationPath, ctx.Param("projectId"), &projectId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter projectId: %s", err))
	}

	// ------------- Path parameter "instanceId" -------------
	var instanceId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "instanceId", runtime.ParamLocationPath, ctx.Param("instanceId"), &instanceId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter instanceId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetV1ProjectsProjectIdInstancesInstanceId(ctx, projectId, instanceId)
	return err
}

// GetV1ProjectsProjectIdInstancesInstanceIdAcls converts echo context to params.
func (w *ServerInterfaceWrapper) GetV1ProjectsProjectIdInstancesInstanceIdAcls(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "projectId" -------------
	var projectId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "projectId", runtime.ParamLocationPath, ctx.Param("projectId"), &projectId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter projectId: %s", err))
	}

	// ------------- Path parameter "instanceId" -------------
	var instanceId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "instanceId", runtime.ParamLocationPath, ctx.Param("instanceId"), &instanceId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter instanceId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetV1ProjectsProjectIdInstancesInstanceIdAcls(ctx, projectId, instanceId)
	return err
}

// PostV1ProjectsProjectIdInstancesInstanceIdAcls converts echo context to params.
func (w *ServerInterfaceWrapper) PostV1ProjectsProjectIdInstancesInstanceIdAcls(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "projectId" -------------
	var projectId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "projectId", runtime.ParamLocationPath, ctx.Param("projectId"), &projectId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter projectId: %s", err))
	}

	// ------------- Path parameter "instanceId" -------------
	var instanceId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "instanceId", runtime.ParamLocationPath, ctx.Param("instanceId"), &instanceId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter instanceId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostV1ProjectsProjectIdInstancesInstanceIdAcls(ctx, projectId, instanceId)
	return err
}

// PutV1ProjectsProjectIdInstancesInstanceIdAcls converts echo context to params.
func (w *ServerInterfaceWrapper) PutV1ProjectsProjectIdInstancesInstanceIdAcls(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "projectId" -------------
	var projectId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "projectId", runtime.ParamLocationPath, ctx.Param("projectId"), &projectId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter projectId: %s", err))
	}

	// ------------- Path parameter "instanceId" -------------
	var instanceId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "instanceId", runtime.ParamLocationPath, ctx.Param("instanceId"), &instanceId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter instanceId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutV1ProjectsProjectIdInstancesInstanceIdAcls(ctx, projectId, instanceId)
	return err
}

// DeleteV1ProjectsProjectIdInstancesInstanceIdAclsAclId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteV1ProjectsProjectIdInstancesInstanceIdAclsAclId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "projectId" -------------
	var projectId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "projectId", runtime.ParamLocationPath, ctx.Param("projectId"), &projectId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter projectId: %s", err))
	}

	// ------------- Path parameter "instanceId" -------------
	var instanceId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "instanceId", runtime.ParamLocationPath, ctx.Param("instanceId"), &instanceId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter instanceId: %s", err))
	}

	// ------------- Path parameter "aclId" -------------
	var aclId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "aclId", runtime.ParamLocationPath, ctx.Param("aclId"), &aclId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter aclId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteV1ProjectsProjectIdInstancesInstanceIdAclsAclId(ctx, projectId, instanceId, aclId)
	return err
}

// GetV1ProjectsProjectIdInstancesInstanceIdAclsAclId converts echo context to params.
func (w *ServerInterfaceWrapper) GetV1ProjectsProjectIdInstancesInstanceIdAclsAclId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "projectId" -------------
	var projectId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "projectId", runtime.ParamLocationPath, ctx.Param("projectId"), &projectId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter projectId: %s", err))
	}

	// ------------- Path parameter "instanceId" -------------
	var instanceId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "instanceId", runtime.ParamLocationPath, ctx.Param("instanceId"), &instanceId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter instanceId: %s", err))
	}

	// ------------- Path parameter "aclId" -------------
	var aclId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "aclId", runtime.ParamLocationPath, ctx.Param("aclId"), &aclId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter aclId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetV1ProjectsProjectIdInstancesInstanceIdAclsAclId(ctx, projectId, instanceId, aclId)
	return err
}

// PutV1ProjectsProjectIdInstancesInstanceIdAclsAclId converts echo context to params.
func (w *ServerInterfaceWrapper) PutV1ProjectsProjectIdInstancesInstanceIdAclsAclId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "projectId" -------------
	var projectId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "projectId", runtime.ParamLocationPath, ctx.Param("projectId"), &projectId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter projectId: %s", err))
	}

	// ------------- Path parameter "instanceId" -------------
	var instanceId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "instanceId", runtime.ParamLocationPath, ctx.Param("instanceId"), &instanceId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter instanceId: %s", err))
	}

	// ------------- Path parameter "aclId" -------------
	var aclId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "aclId", runtime.ParamLocationPath, ctx.Param("aclId"), &aclId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter aclId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutV1ProjectsProjectIdInstancesInstanceIdAclsAclId(ctx, projectId, instanceId, aclId)
	return err
}

// GetV1ProjectsProjectIdInstancesInstanceIdUsers converts echo context to params.
func (w *ServerInterfaceWrapper) GetV1ProjectsProjectIdInstancesInstanceIdUsers(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "projectId" -------------
	var projectId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "projectId", runtime.ParamLocationPath, ctx.Param("projectId"), &projectId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter projectId: %s", err))
	}

	// ------------- Path parameter "instanceId" -------------
	var instanceId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "instanceId", runtime.ParamLocationPath, ctx.Param("instanceId"), &instanceId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter instanceId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetV1ProjectsProjectIdInstancesInstanceIdUsers(ctx, projectId, instanceId)
	return err
}

// PostV1ProjectsProjectIdInstancesInstanceIdUsers converts echo context to params.
func (w *ServerInterfaceWrapper) PostV1ProjectsProjectIdInstancesInstanceIdUsers(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "projectId" -------------
	var projectId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "projectId", runtime.ParamLocationPath, ctx.Param("projectId"), &projectId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter projectId: %s", err))
	}

	// ------------- Path parameter "instanceId" -------------
	var instanceId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "instanceId", runtime.ParamLocationPath, ctx.Param("instanceId"), &instanceId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter instanceId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostV1ProjectsProjectIdInstancesInstanceIdUsers(ctx, projectId, instanceId)
	return err
}

// DeleteV1ProjectsProjectIdInstancesInstanceIdUsersUserId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteV1ProjectsProjectIdInstancesInstanceIdUsersUserId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "projectId" -------------
	var projectId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "projectId", runtime.ParamLocationPath, ctx.Param("projectId"), &projectId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter projectId: %s", err))
	}

	// ------------- Path parameter "instanceId" -------------
	var instanceId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "instanceId", runtime.ParamLocationPath, ctx.Param("instanceId"), &instanceId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter instanceId: %s", err))
	}

	// ------------- Path parameter "userId" -------------
	var userId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "userId", runtime.ParamLocationPath, ctx.Param("userId"), &userId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter userId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteV1ProjectsProjectIdInstancesInstanceIdUsersUserId(ctx, projectId, instanceId, userId)
	return err
}

// GetV1ProjectsProjectIdInstancesInstanceIdUsersUserId converts echo context to params.
func (w *ServerInterfaceWrapper) GetV1ProjectsProjectIdInstancesInstanceIdUsersUserId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "projectId" -------------
	var projectId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "projectId", runtime.ParamLocationPath, ctx.Param("projectId"), &projectId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter projectId: %s", err))
	}

	// ------------- Path parameter "instanceId" -------------
	var instanceId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "instanceId", runtime.ParamLocationPath, ctx.Param("instanceId"), &instanceId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter instanceId: %s", err))
	}

	// ------------- Path parameter "userId" -------------
	var userId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "userId", runtime.ParamLocationPath, ctx.Param("userId"), &userId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter userId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetV1ProjectsProjectIdInstancesInstanceIdUsersUserId(ctx, projectId, instanceId, userId)
	return err
}

// PutV1ProjectsProjectIdInstancesInstanceIdUsersUserId converts echo context to params.
func (w *ServerInterfaceWrapper) PutV1ProjectsProjectIdInstancesInstanceIdUsersUserId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "projectId" -------------
	var projectId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "projectId", runtime.ParamLocationPath, ctx.Param("projectId"), &projectId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter projectId: %s", err))
	}

	// ------------- Path parameter "instanceId" -------------
	var instanceId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "instanceId", runtime.ParamLocationPath, ctx.Param("instanceId"), &instanceId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter instanceId: %s", err))
	}

	// ------------- Path parameter "userId" -------------
	var userId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "userId", runtime.ParamLocationPath, ctx.Param("userId"), &userId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter userId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutV1ProjectsProjectIdInstancesInstanceIdUsersUserId(ctx, projectId, instanceId, userId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v1/projects/:projectId/instances", wrapper.GetV1ProjectsProjectIdInstances)
	router.POST(baseURL+"/v1/projects/:projectId/instances", wrapper.PostV1ProjectsProjectIdInstances)
	router.DELETE(baseURL+"/v1/projects/:projectId/instances/:instanceId", wrapper.DeleteV1ProjectsProjectIdInstancesInstanceId)
	router.GET(baseURL+"/v1/projects/:projectId/instances/:instanceId", wrapper.GetV1ProjectsProjectIdInstancesInstanceId)
	router.GET(baseURL+"/v1/projects/:projectId/instances/:instanceId/acls", wrapper.GetV1ProjectsProjectIdInstancesInstanceIdAcls)
	router.POST(baseURL+"/v1/projects/:projectId/instances/:instanceId/acls", wrapper.PostV1ProjectsProjectIdInstancesInstanceIdAcls)
	router.PUT(baseURL+"/v1/projects/:projectId/instances/:instanceId/acls", wrapper.PutV1ProjectsProjectIdInstancesInstanceIdAcls)
	router.DELETE(baseURL+"/v1/projects/:projectId/instances/:instanceId/acls/:aclId", wrapper.DeleteV1ProjectsProjectIdInstancesInstanceIdAclsAclId)
	router.GET(baseURL+"/v1/projects/:projectId/instances/:instanceId/acls/:aclId", wrapper.GetV1ProjectsProjectIdInstancesInstanceIdAclsAclId)
	router.PUT(baseURL+"/v1/projects/:projectId/instances/:instanceId/acls/:aclId", wrapper.PutV1ProjectsProjectIdInstancesInstanceIdAclsAclId)
	router.GET(baseURL+"/v1/projects/:projectId/instances/:instanceId/users", wrapper.GetV1ProjectsProjectIdInstancesInstanceIdUsers)
	router.POST(baseURL+"/v1/projects/:projectId/instances/:instanceId/users", wrapper.PostV1ProjectsProjectIdInstancesInstanceIdUsers)
	router.DELETE(baseURL+"/v1/projects/:projectId/instances/:instanceId/users/:userId", wrapper.DeleteV1ProjectsProjectIdInstancesInstanceIdUsersUserId)
	router.GET(baseURL+"/v1/projects/:projectId/instances/:instanceId/users/:userId", wrapper.GetV1ProjectsProjectIdInstancesInstanceIdUsersUserId)
	router.PUT(baseURL+"/v1/projects/:projectId/instances/:instanceId/users/:userId", wrapper.PutV1ProjectsProjectIdInstancesInstanceIdUsersUserId)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xbW5MauRX+K6c6eWSA2XUewhs7TlJUNgllz6Qq5fhB033o1kZIbV3Akyn++9ZRX2hA",
	"zc0wBhdPMIzQueg737m0eI1iNc2VRGlNNHiNTJzhlPm3LBb0kmuVo7Yc/YcxTzS9JmhizXPLlYwG0WOG",
	"kPIZShiNe6MxfGAyRbAZs8AN5Kin3FpMwCpgcYzGdKNOZF9yjAaRsZrLNFp0Ip5s7jwE5qyCFCVqRls4",
	"yb84BJ7APONxBjxBafmEowGbIbBYBPZedCKNXxzXmESDTySoU1jyedEhOx80Motvae2aRk1lfuXGbqrC",
	"YuFfucWpf/NHjZNoEP2htzzAXnl6PTq6RS2Tac1eNkT6DUuRT3lyOfYXyoS9QOsOckNp2S5n1PK5NJbJ",
	"OOALlvMnLcLeGI5HgDLJFZcWJkpDrKTE2HKZkhcImAZjjdYAypRLDOI/JhRyJf/KJTcZJu/LM9mURzYB",
	"kwlYPkW/ffVdUBP/98dS3D+YZClqqOyCOTMwKQVs1eKjZdqeTQWreZqibtHhFExQOXy6Jj7MPZJNMSTT",
	"GdQQZ8qgBFpDx5lwQyfruMlg6oTluThUXLH6QTlpw+6VbvqMmlxZbRw7rVFa8QLGKo0JSeAJVt6u5HXh",
	"MeMGZkw4hDkXAp4RnI+CBBS5P0cNmXK6oRiXFlPUS83MXzxMW3QjP5Ri94C1sa0gKm0Cv2QXboKbF5at",
	"R0zLshVI75EiPCjWXdKpmKCyLBQyqyfcJJa2VPOmAFwz1stuKhkm33rHvQm4ZtNd/LvcmtQgmzfFr3hm",
	"u6Ma/yv8NZkgAY0TzJ7RzhHl0nP0zfNVJO2758yYudL7yKiW+uQiVJpSZuES5txmtZRwgBjUbdhaN6Rc",
	"eriQueahEB8Rz5NrJvXXIWMG/PKyNmjJjzAyMGHCFMow0MiSOyXFy7oSz0oJZDIcwLXxDWdX2nZWlK1g",
	"1xae3wF8F+jUbZ4Lc4Y3b2++8IG/iyuKLSuxbaXrRXhvsfCkOlGh9MeNrxtzrWY8QVMXkMbv72nc14/L",
	"lHhXpsTufyVJ41aQuI+Pw4e/jx438uZwPIo60Qy1KSTed3/q9sm7KkfJch4Nop+7/e7PPjhs5r3Wm933",
	"cq1+w9ia3mv5bpQseivcn2KgavmA1mlpgIHgxlIyZ0K0JnPjWYVLb14ph1xIR+hz6SiJBtHf0P77flzq",
	"M660GdW6EDBMrqQp9Pqp3/dNgpIWi8KK5bngsd+w95spYrcA276py8Pan+OquR+dx8rECah0KIiSrG7k",
	"3kUnete/33TXk2TOZkrz/2PShf8oB1P2AhmbYYWIBKQCpWGulUypuvZ5hYli0z8Vtq6hW1oiPAEG9Qw1",
	"oNZKU0WI0PAE4NccNUcZYwJGTRGcpI9iSgKGW+dXdX3gWZaatQTdib7ezTjOUd/5Xs8Qvsoe1RZvP0XV",
	"kVKQRJ8XPttpNkXr6eBTqBiscJwrbZmoQAFPT6P32/sJajqZJsgRgjjtR4CuCrhBVOM4ajIJ8UCngYaJ",
	"0lNmo0HknE8eq4RMVqfqbr2Q+tyJcmUC4VAkEgoHifMtvdAeUTBWZncYfHFo7C8qeTl5BJQpcbHKw+S9",
	"xUb83Z9ceij2Rs1O0hffBNw6IMVLEXWBAPmFJfCh8FUXRnLGBE+Wh0FwuUUsGuU0cRcmnHoX2nR3Xui9",
	"Vm9HyaKwU2AoA7/3nxe1cTFF2tbwrUZC8d1tsTCqldhMDu9C7m8gqdB4FUnng8O7kD7/VBYmysmE0Fmh",
	"sv7sqlHU2V42EBwStIyLov45Bh47yoVt2Oi/LXFVljahBhqt5jjD5Aa6W7ERKjY6QUvaNCVbWnTkq5Fw",
	"2oro8HTRqx5u7GQIWnh+ehiSOmekiOohT4AhhkKsGtl6vD7onxEl8YbT8kYbxROtG2NcHWMc10OxWJyk",
	"fQrE/embqeVD5jfuo/yj4ADPkPO+qXt64In28e6bqBv3iFOUyLkLhUHGZIrNydrw4df9BmhjdxHQbzzS",
	"3wv+gaMjBWGOGiH27jgGsv+SSDibKo0evgaYxkvA8KZi1w/mI8vA3iuLxcEjhPLaz/HTAoLXkATvNTao",
	"2DM0Mfj+RKiK3Pgj8OGRI4MgHA4q/1uw0D93Xn4M2ESHuaz210cGl1L6Xy3qbh3Ad+8AgkoSmrxv97gX",
	"FNCX1RF88mYlVKQVJU5BSjwHXZRsjRD+xuJs2DDnbBXa0dXZY8PqfXirvJDWvdJW44fJsEcUafWNjp25",
	"2a88/7TuySt0xlRd325pmdet2nkb2O0N4fImzy1f/6ATO3+76tj4339stySA06fGxp3A/XPjySS3dQj1",
	"tTVPJ9UMbxcDbc+2usq25M61S4wKhJLpxdHVu/6fAxBUciJ4XBki+JRb0MjijHR7UNKy2Bb3+1xO1HA9",
	"zHeq7N17pZeDhyzVNcfjpyw+Up+87NNcz7iIUtBH4xUm0pONW8LAOKyAa0PF2xDqul0lwV7BzOVawXer",
	"4i5z6uLx5J3rbzM3jhKUPGYO45aB/eaDmEPoau9pzDpdnafoPMFA5hBSWx3I3DjtNPWZ/z0lqRYmt2/9",
	"BYjTIhpEmbW5GfR65c9V7sofAHZZzrvo+vddY1n8P267sVAuiRafF78HAAD//95c4HT1PwAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
